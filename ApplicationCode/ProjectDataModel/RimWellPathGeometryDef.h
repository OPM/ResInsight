/////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) 2018-     Equinor ASA
//
//  ResInsight is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  ResInsight is distributed in the hope that it will be useful, but WITHOUT ANY
//  WARRANTY; without even the implied warranty of MERCHANTABILITY or
//  FITNESS FOR A PARTICULAR PURPOSE.
//
//  See the GNU General Public License at <http://www.gnu.org/licenses/gpl.html>
//  for more details.
//
/////////////////////////////////////////////////////////////////////////////////
#pragma once

#include "RimWellPathGeometryDefInterface.h"

#include "RiaLineArcWellPathCalculator.h"
#include "RiaWellPlanCalculator.h"

#include "cafAppEnum.h"
#include "cafPdmChildArrayField.h"
#include "cafPdmChildField.h"
#include "cafPdmField.h"
#include "cafPdmFieldCvfVec3d.h"
#include "cafPdmObject.h"
#include "cafPdmPtrField.h"

#include "cvfObject.h"

class RimWellPath;
class RimWellPathTarget;
class RicCreateWellTargetsPickEventHandler;

class RigWellPath;

class RimWellPathGeometryDef : public RimWellPathGeometryDefInterface
{
    CAF_PDM_HEADER_INIT;

public:
    caf::Signal<bool> changed;

public:
    RimWellPathGeometryDef();
    ~RimWellPathGeometryDef() override;

    cvf::Vec3d anchorPointXyz() const override;
    void       setReferencePointXyz( const cvf::Vec3d& refPointXyz );

    double airGap() const;
    void   setAirGap( double airGap );
    double mdAtFirstTarget() const;
    void   setMdAtFirstTarget( double mdrkb );

    std::pair<RimWellPathTarget*, RimWellPathTarget*>
        findActiveTargetsAroundInsertionPoint( const RimWellPathTarget* targetToInsertBefore );

    cvf::ref<RigWellPath> createWellPathGeometry() override;
    void insertTarget( const RimWellPathTarget* targetToInsertBefore, RimWellPathTarget* targetToInsert ) override;
    void deleteTarget( RimWellPathTarget* targetTodelete ) override;
    void deleteAllTargets() override;
    RimWellPathTarget* appendTarget() override;

    const RimWellPathTarget*        firstActiveTarget() const override;
    const RimWellPathTarget*        lastActiveTarget() const override;
    std::vector<RimWellPathTarget*> activeWellTargets() const override;

    void enableTargetPointPicking( bool isEnabling ) override;
    void updateWellPathVisualization( bool fullUpdate ) override;

    void setUseAutoGeneratedTargetAtSeaLevel( bool autoGenerate );

    std::vector<RiaWellPlanCalculator::WellPlanSegment> wellPlan() const;

protected:
    void defineCustomContextMenu( const caf::PdmFieldHandle* fieldNeedingMenu, QMenu* menu, QWidget* fieldEditorWidget ) override;

    void defineEditorAttribute( const caf::PdmFieldHandle* field,
                                QString                    uiConfigName,
                                caf::PdmUiEditorAttribute* attribute ) override;

    virtual void defineObjectEditorAttribute( QString uiConfigName, caf::PdmUiEditorAttribute* attribute ) override;

    void onTargetMoved( const caf::SignalEmitter* emitter, bool fullUpdate );

private:
    void fieldChangedByUi( const caf::PdmFieldHandle* changedField, const QVariant& oldValue, const QVariant& newValue ) override;
    void defineUiOrdering( QString uiConfigName, caf::PdmUiOrdering& uiOrdering ) override;
    void defineUiTreeOrdering( caf::PdmUiTreeOrdering& uiTreeOrdering, QString uiConfigName ) override;
    void initAfterRead() override;
    QList<caf::PdmOptionItemInfo> calculateValueOptions( const caf::PdmFieldHandle* fieldNeedingOptions,
                                                         bool*                      useOptionsOnly ) override;

    RiaLineArcWellPathCalculator lineArcWellPathCalculator() const;

    void updateTargetAtSeaLevel();
    void test();

private:
    caf::PdmField<cvf::Vec3d> m_referencePointUtmXyd;

    caf::PdmField<double> m_airGap;

    caf::PdmField<double>                       m_mdAtFirstTarget;
    caf::PdmChildArrayField<RimWellPathTarget*> m_wellTargets;
    caf::PdmField<bool>                         m_useAutoGeneratedTargetAtSeaLevel;
    caf::PdmChildField<RimWellPathTarget*>      m_autoTargetAtSeaLevel;
    caf::PdmField<bool>                         m_pickPointsEnabled;

    std::shared_ptr<RicCreateWellTargetsPickEventHandler> m_pickTargetsEventHandler;
};
