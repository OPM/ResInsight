
#### Matrix[numSelectedCells][5] riGetSelectedCells([CaseId])

This function returns a two dimensional matrix containing the cell info for each selected cell in the case with `CaseId`.
The columns contain the following information:

    [CaseId, GridIdx, I, J, K]
      CaseId  # The ID of the case the cell resides in.
      GridIdx # The index of the grid the cell resides in.
              # Main grid has index 0
      I, J, K # 1-based index of the cell in the grid.


If the CaseId is not defined, ResInsight's Current Case is used.


#### Matrix[numSelectedCells][numTimestepsRequested] riGetGridPropertyForSelectedCells([CaseId], PropertyName, [RequestedTimeSteps], [PorosityModel = "Matrix"|"Fracture"] )

This function returns a two dimensional matrix: [numSelectedCells][numTimestepsRequested] containing the requested property data from the case with CaseId.

If the CaseId is not defined, ResInsight's Current Case is used.
The RequestedTimeSteps must contain a list of 1-based indices to the requested time steps. If not defined, all the time steps are returned.


#### Vector[PropertyInfo] riGetNNCPropertyNames([CaseId])

This function returns the name and type of all NNC properties in the case as a vector of structures.

The structure is defined as:

    PropertyInfo {
      PropName    = string # Name of the property as received from
                           # the analysis tool
      PropType    = string # The type of the property: "StaticNative",
                           # "DynamicNative", "Generated"
    }

If the CaseId is not defined, ResInsight's Current Case is used.


#### Matrix[numNNCConnections][2] riGetNNCConnections([CaseId])

This function returns a two dimensional matrix containing grid and IJK information about each NNC connection.
Each row contains a from and to cell for the connection.
The cells are specified in a structure defined as:

    CellInfo = {
      GridIndex = int # Index of the grid the cell resides in.
                      # Main grid has index 0.
      I, J, K   = int # 1-based index address of the cell in the grid.
    }

#### Matrix[numConnections][numTimestepsRequested] riGetDynamicNNCValues([CaseId], PropertyName, [RequestedTimeSteps])

This function returns a two dimensional matrix: [Num Connections][Num Time Steps Requested] containing the value of the requested property from the case with CaseId. The order of connections is the same as the order from `riGetNNCConnectio

If the CaseId is not defined, ResInsight's Current Case is used.
The RequestedTimeSteps must contain a list of indices to the requested time steps. If not defined, all the timesteps are returned.

#### Vector[numConnections] riGetStaticNNCValues([CaseId], PropertyName)

This function returns a vector of values for the requested static property for each NNC connection. The order of connections is the same as the order from `riGetNNCConnections`.

If the CaseId is not defined, ResInsight's Current Case is used.

#### riSetNNCProperty(Matrix[numNNCConnections][numTimeSteps], [CaseId], PropertyName, [TimeStepIndices])

Interprets the supplied matrix as a property set defined for the NNC connections in the case, and puts the data into ResInsight as a "Generated" property with the name "PropertyName".
The "TimeStepIndices" argument is used to "label" all the steps present in the supplied data matrix and must thus be complete.
The time step data will then be put into ResInsight at the time steps requested.

If the CaseId is not defined, ResInsight's Current Case is used.

